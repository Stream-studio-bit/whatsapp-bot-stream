import { callGroqAI } from '../config/groq.js';
import { getSystemPromptForCustomer, FANPAGE_MESSAGE } from '../utils/knowledgeBase.js';
import { log } from '../utils/helpers.js';
import NodeCache from 'node-cache';

/**
 * CACHE DE HIST√ìRICO DE CONVERSAS
 * Armazena o hist√≥rico de mensagens com a IA para cada usu√°rio
 * TTL: 1 hora (3600 segundos)
 */
const conversationCache = new NodeCache({ 
  stdTTL: 3600,
  checkperiod: 300 
});

/**
 * Limite de mensagens no hist√≥rico (para n√£o ultrapassar limite de tokens)
 */
const MAX_HISTORY_MESSAGES = 10;

/**
 * Obt√©m hist√≥rico de conversa do usu√°rio
 * @param {string} phone - N√∫mero do telefone
 * @returns {Array}
 */
function getConversationHistory(phone) {
  return conversationCache.get(phone) || [];
}

/**
 * Salva hist√≥rico de conversa do usu√°rio
 * @param {string} phone - N√∫mero do telefone
 * @param {Array} history - Hist√≥rico de mensagens
 */
function saveConversationHistory(phone, history) {
  // Limita o tamanho do hist√≥rico
  const limitedHistory = history.slice(-MAX_HISTORY_MESSAGES);
  conversationCache.set(phone, limitedHistory);
}

/**
 * Adiciona mensagem ao hist√≥rico
 * @param {string} phone - N√∫mero do telefone
 * @param {string} role - Papel (user ou assistant)
 * @param {string} content - Conte√∫do da mensagem
 */
function addToHistory(phone, role, content) {
  const history = getConversationHistory(phone);
  history.push({ role, content });
  saveConversationHistory(phone, history);
}

/**
 * Limpa hist√≥rico de conversa de um usu√°rio
 * @param {string} phone - N√∫mero do telefone
 */
export function clearConversationHistory(phone) {
  conversationCache.del(phone);
  log('INFO', `üóëÔ∏è Hist√≥rico de conversa limpo para: ${phone}`);
}

/**
 * üî• NOVO: Gera instru√ß√µes de contextualiza√ß√£o din√¢micas
 * @param {boolean} isFirstMessage - Se √© a primeira mensagem
 * @param {string} customerName - Nome do cliente
 * @returns {string}
 */
function getContextInstructions(isFirstMessage, customerName) {
  if (isFirstMessage) {
    return `
## üìç CONTEXTO ATUAL:
Esta √© a **PRIMEIRA MENSAGEM** do cliente ${customerName}.

**VOC√ä DEVE:**
‚úÖ Cumprimentar o cliente pelo nome
‚úÖ Se apresentar como Assistente Virtual da Stream Studio
‚úÖ Ser caloroso e acolhedor

**EXEMPLO:**
"Ol√° ${customerName}! üëã Sou o Assistente Virtual da Stream Studio..."
`;
  } else {
    return `
## üìç CONTEXTO ATUAL:
Esta √© uma **CONTINUA√á√ÉO** de conversa com ${customerName}.

**HIST√ìRICO DISPON√çVEL:**
O hist√≥rico completo est√° acima. Leia TODO o hist√≥rico antes de responder.

**VOC√ä DEVE:**
‚úÖ Continuar naturalmente a partir do contexto anterior
‚úÖ Referenciar informa√ß√µes j√° mencionadas
‚úÖ Ser progressivo: cada resposta avan√ßa a conversa
‚úÖ N√ÉO repetir informa√ß√µes j√° fornecidas

**VOC√ä N√ÉO DEVE:**
‚ùå Cumprimentar novamente ("Ol√°", "Oi", etc.)
‚ùå Se reapresentar
‚ùå Repetir informa√ß√µes do hist√≥rico
‚ùå Recome√ßar a conversa do zero

**EXEMPLO CORRETO:**
Cliente: "Qual o pre√ßo?"
Voc√™: "O bot est√° em promo√ß√£o: R$ 499,00..." ‚Üê ‚úÖ Direto ao ponto

Cliente: "Posso parcelar?"
Voc√™: "Sim! Voc√™ pode parcelar em at√© 5x..." ‚Üê ‚úÖ Continua naturalmente
`;
  }
}

/**
 * Processa mensagem com a IA para NOVO LEAD (interessado no bot)
 * @param {string} phone - N√∫mero do telefone
 * @param {string} customerName - Nome do cliente
 * @param {string} userMessage - Mensagem do usu√°rio
 * @returns {Promise<string>} Resposta da IA
 */
export async function processLeadMessage(phone, customerName, userMessage) {
  try {
    log('INFO', `ü§ñ Processando mensagem de LEAD: ${customerName}`);
    
    // Obt√©m hist√≥rico
    const history = getConversationHistory(phone);
    
    // üî• NOVO: Verifica se √© primeira mensagem
    const isFirstMessage = history.length === 0;
    
    log('INFO', `üìä Hist√≥rico: ${history.length} mensagens | Primeira mensagem: ${isFirstMessage}`);
    
    // System prompt base
    const baseSystemPrompt = getSystemPromptForCustomer(customerName);
    
    // üî• NOVO: Adiciona instru√ß√µes de contextualiza√ß√£o
    const contextInstructions = getContextInstructions(isFirstMessage, customerName);
    
    // System prompt completo
    const fullSystemPrompt = `${baseSystemPrompt}

${contextInstructions}

## üéØ REGRAS DE SAUDA√á√ÉO:

**QUANDO SAUDAR:**
‚úÖ Apenas na primeira mensagem (hist√≥rico vazio)
‚úÖ Quando cliente envia sauda√ß√£o expl√≠cita ("Oi", "Ol√°", "Bom dia")

**QUANDO N√ÉO SAUDAR:**
‚ùå Em qualquer continua√ß√£o de conversa
‚ùå Quando cliente faz pergunta direta
‚ùå Quando j√° cumprimentou antes no hist√≥rico

**IMPORTANTE:**
- Se h√° hist√≥rico, N√ÉO cumprimente novamente
- Continue a conversa naturalmente
- Fa√ßa refer√™ncia ao que j√° foi discutido`;
    
    // Monta array de mensagens
    const messages = [
      {
        role: 'system',
        content: fullSystemPrompt
      },
      ...history,
      {
        role: 'user',
        content: userMessage
      }
    ];
    
    // Chama a IA
    const aiResponse = await callGroqAI(messages);
    
    // Adiciona ao hist√≥rico
    addToHistory(phone, 'user', userMessage);
    addToHistory(phone, 'assistant', aiResponse);
    
    log('SUCCESS', `‚úÖ Resposta gerada para ${customerName} (${isFirstMessage ? 'PRIMEIRA' : 'CONTINUA√á√ÉO'})`);
    
    return aiResponse;
    
  } catch (error) {
    log('ERROR', `‚ùå Erro ao processar mensagem de lead: ${error.message}`);
    return `Desculpe ${customerName}, estou com dificuldades t√©cnicas no momento. üòÖ\n\nMas n√£o se preocupe! O Roberto pode te atender direto pelo WhatsApp: ${process.env.WHATSAPP_SUPPORT}`;
  }
}

/**
 * Processa mensagem com a IA para CLIENTE EXISTENTE
 * @param {string} phone - N√∫mero do telefone
 * @param {string} customerName - Nome do cliente
 * @param {string} userMessage - Mensagem do usu√°rio
 * @returns {Promise<string>} Resposta da IA
 */
export async function processClientMessage(phone, customerName, userMessage) {
  try {
    log('INFO', `ü§ñ Processando mensagem de CLIENTE: ${customerName}`);
    
    const ownerName = process.env.OWNER_NAME || 'Roberto';
    
    // Obt√©m hist√≥rico
    const history = getConversationHistory(phone);
    
    // üî• NOVO: Verifica se √© primeira mensagem
    const isFirstMessage = history.length === 0;
    
    log('INFO', `üìä Hist√≥rico: ${history.length} mensagens | Primeira mensagem: ${isFirstMessage}`);
    
    // üî• NOVO: Adiciona instru√ß√µes de contextualiza√ß√£o
    const contextInstructions = getContextInstructions(isFirstMessage, customerName);
    
    // System prompt para clientes existentes (mais gen√©rico)
    const systemPrompt = `Voc√™ √© o Assistente Virtual da Stream Studio.

O cliente ${customerName} j√° √© um cliente conhecido e pode ter projetos em andamento com o ${ownerName}.

Sua fun√ß√£o √©:
1. Ser cordial e receptivo
2. Perguntar se ele tem algum projeto em andamento
3. Se sim, informar que o ${ownerName} logo ir√° atend√™-lo
4. Se n√£o, perguntar como pode ajudar
5. Responder d√∫vidas gerais sobre a empresa
6. Sempre que apropriado, informar que o ${ownerName} pode dar mais detalhes

**IMPORTANTE:**
- Seja breve e objetivo (m√°ximo 5 linhas)
- N√£o fa√ßa promessas sobre projetos ou prazos
- Para quest√µes t√©cnicas espec√≠ficas, sempre encaminhe para o ${ownerName}
- Use um tom amig√°vel mas profissional

**CONTATO:**
WhatsApp do Roberto: ${process.env.WHATSAPP_SUPPORT}

${contextInstructions}

## üéØ REGRAS DE SAUDA√á√ÉO:

**QUANDO SAUDAR:**
‚úÖ Apenas na primeira mensagem (hist√≥rico vazio)
‚úÖ Quando cliente envia sauda√ß√£o expl√≠cita ("Oi", "Ol√°", "Bom dia")

**QUANDO N√ÉO SAUDAR:**
‚ùå Em qualquer continua√ß√£o de conversa
‚ùå Quando cliente faz pergunta direta
‚ùå Quando j√° cumprimentou antes no hist√≥rico

**USO DO HIST√ìRICO:**
- SEMPRE leia TODO o hist√≥rico antes de responder
- N√£o repita informa√ß√µes j√° fornecidas
- Fa√ßa refer√™ncia ao que j√° foi discutido
- Seja progressivo: cada resposta avan√ßa a conversa`;
    
    // Monta array de mensagens
    const messages = [
      {
        role: 'system',
        content: systemPrompt
      },
      ...history,
      {
        role: 'user',
        content: userMessage
      }
    ];
    
    // Chama a IA
    const aiResponse = await callGroqAI(messages);
    
    // Adiciona ao hist√≥rico
    addToHistory(phone, 'user', userMessage);
    addToHistory(phone, 'assistant', aiResponse);
    
    log('SUCCESS', `‚úÖ Resposta gerada para cliente ${customerName} (${isFirstMessage ? 'PRIMEIRA' : 'CONTINUA√á√ÉO'})`);
    
    return aiResponse;
    
  } catch (error) {
    log('ERROR', `‚ùå Erro ao processar mensagem de cliente: ${error.message}`);
    const ownerName = process.env.OWNER_NAME || 'Roberto';
    return `Desculpe ${customerName}, estou com dificuldades t√©cnicas no momento. üòÖ\n\nO ${ownerName} logo ir√° te atender!`;
  }
}

/**
 * Gera resposta de boas-vindas inteligente com IA
 * @param {string} customerName - Nome do cliente
 * @param {boolean} isLead - Se √© um novo lead
 * @returns {Promise<string>}
 */
export async function generateWelcomeMessage(customerName, isLead = false) {
  try {
    const ownerName = process.env.OWNER_NAME || 'Roberto';
    
    if (isLead) {
      // Para novos leads interessados no bot
      return `Ol√° ${customerName}! üëã

Sou o *Assistente Virtual da Stream Studio* e estou aqui para tirar suas d√∫vidas sobre o *Chat Bot Multi-tarefas* para delivery! ü§ñ

Pode me perguntar √† vontade sobre:
- Funcionalidades do bot
- Pre√ßos e formas de pagamento
- Como funciona a instala√ß√£o
- Suporte t√©cnico
- E muito mais!

Como posso ajudar voc√™? üòä`;
    } else {
      // Para clientes existentes
      return `Ol√° *${customerName}*! üëã

Eu sou o *Assistente Virtual*, desenvolvido pela *Stream Studio*, e vou iniciar seu atendimento ok.

Voc√™ j√° possui algum projeto em andamento, ou alguma conversa j√° iniciada?

‚úÖ *Se sim*, basta aguardar que o *${ownerName}* logo ir√° te atender.

‚ùì *Se ainda n√£o*, me conte, como posso ajudar?`;
    }
  } catch (error) {
    log('ERROR', `‚ùå Erro ao gerar boas-vindas: ${error.message}`);
    return `Ol√° ${customerName}! üëã\n\nComo posso ajudar voc√™ hoje?`;
  }
}

/**
 * Verifica se a mensagem menciona interesse em ver a fanpage
 * @param {string} message - Mensagem do usu√°rio
 * @returns {boolean}
 */
export function shouldSendFanpageLink(message) {
  const keywords = [
    'fanpage',
    'site',
    'p√°gina',
    'pagina',
    'demonstra√ß√£o',
    'demonstracao',
    'ver mais',
    'conhecer',
    'acessar',
    'link',
    'endere√ßo',
    'endereco'
  ];
  
  const msg = message.toLowerCase();
  return keywords.some(keyword => msg.includes(keyword));
}

/**
 * Verifica se deve encaminhar para o Roberto (quest√µes complexas)
 * @param {string} message - Mensagem do usu√°rio
 * @returns {boolean}
 */
export function shouldForwardToOwner(message) {
  const keywords = [
    'falar com',
    'quero falar',
    'atendimento humano',
    'pessoa',
    'algu√©m',
    'alguem',
    'urgente',
    'problema',
    'reclama√ß√£o',
    'reclamacao',
    'roberto'
  ];
  
  const msg = message.toLowerCase();
  return keywords.some(keyword => msg.includes(keyword));
}

/**
 * Obt√©m estat√≠sticas de uso da IA
 * @returns {Object}
 */
export function getAIStats() {
  const keys = conversationCache.keys();
  
  return {
    activeConversations: keys.length,
    totalMessages: keys.reduce((total, key) => {
      const history = conversationCache.get(key);
      return total + history.length;
    }, 0)
  };
}

export default {
  processLeadMessage,
  processClientMessage,
  generateWelcomeMessage,
  clearConversationHistory,
  shouldSendFanpageLink,
  shouldForwardToOwner,
  getAIStats
};